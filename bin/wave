#!/usr/bin/env python3
"""
fetch-wave - Make Fetch robot wave in a friendly greeting motion

Usage:
    fetch-wave <session-id> [cycles] [speed]
    
Parameters:
    session-id: ID of the active robot session
    cycles: Number of wave cycles (default: 3)
    speed: Wave speed factor (default: 1.0, higher = faster)
    
Output:
    JSON with success status and message
"""

import sys
import os
import json
import time
import numpy as np
from typing import Tuple

# Add parent directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))

from lib.fetch_api import FetchAPI


def main():
    if len(sys.argv) < 2 or len(sys.argv) > 4:
        print("Usage: fetch-wave <session-id> [cycles] [speed]", file=sys.stderr)
        return 1
    
    session_id = sys.argv[1]
    
    # Parse optional parameters
    try:
        cycles = int(sys.argv[2]) if len(sys.argv) > 2 else 3
        speed = float(sys.argv[3]) if len(sys.argv) > 3 else 1.0
    except ValueError:
        result = {"success": False, "message": "Invalid parameters: cycles must be integer, speed must be float"}
        print(json.dumps(result))
        return 1
    
    # Validate parameters
    if cycles < 1 or cycles > 10:
        result = {"success": False, "message": "Cycles must be between 1 and 10"}
        print(json.dumps(result))
        return 1
        
    if speed <= 0 or speed > 5.0:
        result = {"success": False, "message": "Speed must be between 0.1 and 5.0"}
        print(json.dumps(result))
        return 1
    
    # Execute wave using Direct API
    try:
        api = FetchAPI.connect(session_id)
        success, message = api.wave(cycles, speed)
    except Exception as e:
        success, message = False, f"Direct API failed: {str(e)}"
    
    result = {
        "success": success,
        "message": message,
        "cycles": cycles,
        "speed": speed
    }
    
    print(json.dumps(result))
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main())