#!/usr/bin/env python3
"""
fetch-push - Push Fetch robot gripper with variable power control

Usage:
    fetch-push <session-id> <x> <y> <z> [--power=<level>]
    
Options:
    --power=<level>  Push power level: soft (0.3), medium (0.6), hard (1.0), or custom float value (0.1-2.0)
    
Output:
    JSON with success status and message
"""

import sys
import os
import json
import numpy as np
from typing import Tuple

# Add parent directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))

from lib.fetch_api import FetchAPI


def parse_power_level(power_str: str) -> float:
    """Parse power level string to velocity scale factor."""
    power_map = {
        "soft": 0.3,
        "medium": 0.6, 
        "hard": 1.0
    }
    
    if power_str.lower() in power_map:
        return power_map[power_str.lower()]
    
    try:
        power_value = float(power_str)
        if 0.1 <= power_value <= 2.0:
            return power_value
        else:
            raise ValueError("Power value must be between 0.1 and 2.0")
    except ValueError:
        raise ValueError("Invalid power level. Use 'soft', 'medium', 'hard', or a float between 0.1-2.0")


def main():
    if len(sys.argv) < 5 or len(sys.argv) > 6:
        print("Usage: fetch-push <session-id> <x> <y> <z> [--power=<level>]", file=sys.stderr)
        return 1
    
    session_id = sys.argv[1]
    power_level = 0.6  # default to medium power
    
    try:
        x, y, z = float(sys.argv[2]), float(sys.argv[3]), float(sys.argv[4])
    except ValueError:
        result = {"success": False, "message": "Invalid coordinates"}
        print(json.dumps(result))
        return 1
    
    # Parse optional power flag
    if len(sys.argv) == 6:
        power_arg = sys.argv[5]
        if power_arg.startswith("--power="):
            try:
                power_str = power_arg.split("=")[1]
                power_level = parse_power_level(power_str)
            except (ValueError, IndexError) as e:
                result = {"success": False, "message": f"Power parsing error: {str(e)}"}
                print(json.dumps(result))
                return 1
        else:
            result = {"success": False, "message": "Unknown argument. Use --power=<level>"}
            print(json.dumps(result))
            return 1
    
    # Execute push using Direct API with explicit gripper maintenance
    try:
        api = FetchAPI.connect(session_id)
        # For pushing, always maintain grip (gripper should be closed for contact)
        success, message = api.move_to([x, y, z], maintain_grip=True, velocity_scale=power_level)
    except Exception as e:
        success, message = False, f"Push API failed: {str(e)}"
    
    result = {
        "success": success,
        "message": message,
        "target_position": [x, y, z],
        "power_level": power_level,
        "push_type": "soft" if power_level <= 0.4 else "medium" if power_level <= 0.7 else "hard"
    }
    
    print(json.dumps(result))
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main())