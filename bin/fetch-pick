#!/usr/bin/env python3
"""
fetch-pick - Execute complete pick sequence at specified position

Usage:
    fetch-pick <session-id> <x> <y> <z>
    
Output:
    JSON with success status and detailed results
"""

import sys
import os
import json
import subprocess

# Add parent directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))

from lib.fetch_session import SessionManager

def run_tool(tool_name, *args):
    """Run a fetch tool and return the result."""
    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        tool_path = os.path.join(script_dir, tool_name)
        
        result = subprocess.run([tool_path] + list(args), 
                              capture_output=True, text=True, check=False)
        
        if result.stdout.strip():
            return json.loads(result.stdout)
        else:
            return {"success": False, "message": f"No output from {tool_name}"}
    except Exception as e:
        return {"success": False, "message": f"Failed to run {tool_name}: {str(e)}"}

def main():
    if len(sys.argv) != 5:
        print("Usage: fetch-pick <session-id> <x> <y> <z>", file=sys.stderr)
        return 1
    
    session_id = sys.argv[1]
    x, y, z = sys.argv[2], sys.argv[3], sys.argv[4]
    
    # Validate coordinates
    try:
        float(x), float(y), float(z)
    except ValueError:
        result = {"success": False, "message": "Invalid coordinates"}
        print(json.dumps(result))
        return 1
    
    # Check if session exists
    state = SessionManager.get_session_state(session_id)
    if not state:
        result = {"success": False, "message": f"Session {session_id} not found"}
        print(json.dumps(result))
        return 1
    
    # Execute pick sequence
    sequence_results = []
    overall_success = True
    
    # Step 1: Open gripper
    result = run_tool("fetch-grip", session_id, "open")
    sequence_results.append({"step": "open_gripper", "result": result})
    if not result.get("success", False):
        overall_success = False
    
    # Step 2: Approach position (10cm above)
    if overall_success:
        result = run_tool("fetch-approach", session_id, x, y, z)
        sequence_results.append({"step": "approach", "result": result})
        if not result.get("success", False):
            overall_success = False
    
    # Step 3: Move to grasp position (closer to object surface)
    if overall_success:
        grasp_z = str(float(z) + 0.005)  # 5mm above object center like working demo
        result = run_tool("fetch-move", session_id, x, y, grasp_z)
        sequence_results.append({"step": "descend", "result": result})
        if not result.get("success", False):
            overall_success = False
    
    # Step 4: Close gripper
    if overall_success:
        result = run_tool("fetch-grip", session_id, "close")
        sequence_results.append({"step": "close_gripper", "result": result})
        if not result.get("success", False):
            overall_success = False
    
    # Step 5: Small initial lift to test grip
    if overall_success:
        result = run_tool("fetch-lift", session_id, "0.02")  # 2cm test lift
        sequence_results.append({"step": "test_lift", "result": result})
        if not result.get("success", False):
            overall_success = False
    
    # Step 6: Full lift if test successful
    if overall_success:
        result = run_tool("fetch-lift", session_id, "0.13")  # Additional 13cm (total 15cm)
        sequence_results.append({"step": "full_lift", "result": result})
        if not result.get("success", False):
            overall_success = False
    
    final_result = {
        "success": overall_success,
        "message": "Pick sequence completed" if overall_success else "Pick sequence failed",
        "target_position": [float(x), float(y), float(z)],
        "sequence_results": sequence_results
    }
    
    print(json.dumps(final_result, indent=2))
    return 0 if overall_success else 1

if __name__ == '__main__':
    sys.exit(main())