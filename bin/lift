#!/usr/bin/env python3
"""
fetch-lift - Lift Fetch robot gripper by specified height

Usage:
    fetch-lift <session-id> <height>
    
Output:
    JSON with success status and message
"""

import sys
import os
import json
from typing import Tuple

# Add parent directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))

from lib.fetch_session import SessionManager
from lib.control_algorithms import lift_by_height, MovementExecutor

def perform_lift_motion(session_id: str, height: float) -> Tuple[bool, str]:
    """
    Lift gripper by specified height using the low-level control protocol.
    
    Args:
        session_id: Target session ID
        height: Height to lift in meters
        
    Returns:
        (success, message)
    """
    try:
        # Create movement executor
        executor = MovementExecutor(SessionManager, session_id)
        
        # Execute lift motion
        success, message = lift_by_height(executor, height)
        
        return success, message
        
    except Exception as e:
        return False, f"Lift motion failed: {str(e)}"

def main():
    if len(sys.argv) != 3:
        print("Usage: fetch-lift <session-id> <height>", file=sys.stderr)
        return 1
    
    session_id = sys.argv[1]
    
    try:
        height = float(sys.argv[2])
    except ValueError:
        result = {"success": False, "message": "Invalid height value"}
        print(json.dumps(result))
        return 1
    
    # Check if session exists
    state = SessionManager.get_session_state(session_id)
    if not state:
        result = {"success": False, "message": f"Session {session_id} not found"}
        print(json.dumps(result))
        return 1
    
    # Execute lift using the new control algorithm
    success, message = perform_lift_motion(session_id, height)
    
    result = {
        "success": success,
        "message": message,
        "lift_height": height
    }
    
    print(json.dumps(result))
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main())