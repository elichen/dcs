#!/usr/bin/env python3
"""
fetch-grip - Control Fetch robot gripper

Usage:
    fetch-grip <session-id> open
    fetch-grip <session-id> close
    
Output:
    JSON with success status and message
"""

import sys
import os
import json
from typing import Tuple

# Add parent directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))

from lib.fetch_session import SessionManager
from lib.control_algorithms import MovementExecutor

def perform_gripper_control(session_id: str, open_gripper: bool) -> Tuple[bool, str]:
    """
    Control gripper using the low-level control protocol.
    
    Args:
        session_id: Target session ID
        open_gripper: True to open, False to close
        
    Returns:
        (success, message)
    """
    try:
        # Create movement executor
        executor = MovementExecutor(SessionManager, session_id)
        
        # Execute gripper control
        success, message = executor.control_gripper(open_gripper)
        
        return success, message
        
    except Exception as e:
        return False, f"Gripper control failed: {str(e)}"

def main():
    if len(sys.argv) != 3:
        print("Usage: fetch-grip <session-id> <open|close>", file=sys.stderr)
        return 1
    
    session_id = sys.argv[1]
    action = sys.argv[2].lower()
    
    if action not in ['open', 'close']:
        result = {"success": False, "message": "Action must be 'open' or 'close'"}
        print(json.dumps(result))
        return 1
    
    # Check if session exists
    state = SessionManager.get_session_state(session_id)
    if not state:
        result = {"success": False, "message": f"Session {session_id} not found"}
        print(json.dumps(result))
        return 1
    
    # Execute gripper control using the new control algorithm
    success, message = perform_gripper_control(session_id, action == 'open')
    
    result = {
        "success": success,
        "message": message,
        "gripper_action": action
    }
    
    print(json.dumps(result))
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main())